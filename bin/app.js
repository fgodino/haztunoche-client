// Generated by CoffeeScript 1.6.3
(function() {
  var Auth, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.ActivityController = (function(_super) {
    __extends(ActivityController, _super);

    function ActivityController() {
      _ref = ActivityController.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ActivityController.prototype.elements = {
      ".btn-filter": "buttons",
      "#activity-list": "list"
    };

    ActivityController.prototype.events = {
      "tap .btn-filter": "onTap"
    };

    ActivityController.prototype.onTap = function(event) {
      var action, b, elems, id, target;
      target = event.currentTarget;
      b = $$(target);
      b.toggleClass('secondary');
      id = target.id.slice(4);
      switch (id) {
        case "party":
          b.toggleClass('cancel');
          break;
        case "site":
          b.toggleClass('yellow');
          break;
        case "friend":
          b.toggleClass('accept');
      }
      action = b.hasClass('secondary') ? 'hide' : 'show';
      elems = this.list.find("." + id);
      return elems[action]();
    };

    return ActivityController;

  })(Monocle.Controller);

  App.AuthRemote = (function() {
    function AuthRemote() {}

    AuthRemote.prototype.URIS = {
      login: "/users/login",
      logout: "/users/logout",
      signup: "/users/signup"
    };

    AuthRemote.prototype.login = function(user, success, failure) {
      return this.post(this.URIS.login, user, success, failure);
    };

    AuthRemote.prototype.logout = function(user) {
      return this.post(this.URIS.logout);
    };

    AuthRemote.prototype.signup = function(user, success, failure) {
      return this.post(this.URIS.signup, user, success, failure);
    };

    AuthRemote.prototype.post = function(uri, user, success, failure) {
      var onFail, onSucc, p;
      console.log(uri, user);
      onSucc = function(data) {
        console.log("Callback normal", data);
        if (data) {
          return typeof success === "function" ? success(data) : void 0;
        } else {
          return typeof failure === "function" ? failure(data) : void 0;
        }
      };
      onFail = function(err) {
        console.log("Callback de error", err);
        return typeof failure === "function" ? failure(err) : void 0;
      };
      p = $.post(uri, user);
      p.done(onSucc);
      return p.fail(onFail);
    };

    return AuthRemote;

  })();

  App.AuthStorage = (function() {
    AuthStorage.prototype.KEYS = {
      users: 'users'
    };

    function AuthStorage(users) {
      var data, json;
      this.users = users != null ? users : [];
      json = window.localStorage.getItem(this.KEYS.users);
      data = JSON.parse(json);
      if (data) {
        this.users = data;
      }
      this.signup({
        username: "asd",
        password: "asd123"
      });
      console.log(this.users);
      this;
    }

    AuthStorage.prototype.login = function(user, success, failure) {
      if (this.lookup(user)) {
        return typeof success === "function" ? success(user) : void 0;
      } else {
        return typeof failure === "function" ? failure(user) : void 0;
      }
    };

    AuthStorage.prototype.signup = function(user) {
      var json;
      if (!this.lookup(user)) {
        this.users.push(user);
        json = JSON.stringify(this.users);
        return window.localStorage.setItem(this.KEYS.users, json);
      }
    };

    AuthStorage.prototype.lookup = function(user) {
      var arr;
      arr = this.users.filter(function(u) {
        return user.username === u.username && user.password === u.password;
      });
      if (arr.length > 1) {
        throw App.Exceptions.TooMuchUsersStorage;
      }
      return arr[0];
    };

    return AuthStorage;

  })();

  Auth = (function() {
    function Auth() {}

    Auth.prototype.storage = new App.AuthStorage;

    Auth.prototype.remote = new App.AuthRemote;

    Auth.prototype.login = function(data, success, failure) {
      var fail,
        _this = this;
      if (!this.check(data)) {
        return false;
      }
      fail = function() {
        return _this.remote.login(data, success, failure);
      };
      return this.storage.login(data, success, fail);
    };

    Auth.prototype.signup = function(data) {
      var ok, ok2;
      if (!this.check(data)) {
        return false;
      }
      ok = this.storage.signup(data);
      ok2 = this.remote.signup(data);
      return ok && ok2;
    };

    Auth.prototype.check = function(data) {
      var valid;
      valid = data.username !== "" && data.password !== "";
      if (!valid) {
        throw App.Exceptions.AuthWrongFields;
      } else {
        data.password = this.encrypt(data.password);
      }
      return valid;
    };

    Auth.prototype.encrypt = function(pass) {
      return pass += "123";
    };

    return Auth;

  })();

  App.Auth = new Auth;

  App.HelpController = (function(_super) {
    __extends(HelpController, _super);

    function HelpController() {
      _ref1 = HelpController.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    HelpController.prototype.elements = {
      "#query": "query"
    };

    HelpController.prototype.events = {
      "tap #send-question": "onTap"
    };

    HelpController.prototype.onTap = function() {
      var text;
      text = this.query.val();
      if (text) {
        return this.sendQuestion(text);
      }
    };

    HelpController.prototype.sendQuestion = function(text) {
      var res;
      res = false;
      console.log(text);
      if (res) {
        return Lungo.Notification.success("Question sent!", "You will receive a response in the activity view", "check", 3, function() {
          return {};
        });
      }
    };

    return HelpController;

  })(Monocle.Controller);

  App.LoginController = (function(_super) {
    __extends(LoginController, _super);

    function LoginController() {
      _ref2 = LoginController.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    LoginController.prototype.elements = {
      "#login-name": "name",
      "#login-password": "pass"
    };

    LoginController.prototype.events = {
      "tap .btn-login": "onLogin"
    };

    LoginController.prototype.onLogin = function(event) {
      var data;
      event.preventDefault();
      data = {
        username: this.name.val() || "",
        password: this.pass.val() || ""
      };
      return App.Auth.login(data, this.onSuccess, this.onError);
    };

    LoginController.prototype.onSuccess = function(remoteData) {
      return Lungo.Router.section('#activity');
    };

    LoginController.prototype.onError = function(remoteData) {
      return Lungo.Notification.error("Error", "Login failed :(", "cancel", 2);
    };

    return LoginController;

  })(Monocle.Controller);

  App.MapController = (function(_super) {
    __extends(MapController, _super);

    function MapController() {
      _ref3 = MapController.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    MapController.prototype.notified = false;

    MapController.prototype.events = {
      "load #map": "onLoad"
    };

    MapController.prototype.onLoad = function(event) {
      if (!this.notified) {
        return Lungo.Notification.confirm({
          icon: "pushpin",
          title: "Â¿Find the nearest sites?",
          description: "Map lets you know what are the closest places at your current position. Do you want to find new sites when entering in this window? (You could change this on settings)",
          accept: {
            icon: 'check',
            label: 'Accept and Find',
            callback: this.onAccept
          },
          cancel: {
            icon: "multiply",
            label: "Don't allow",
            callback: this.onCancel
          }
        });
      }
    };

    MapController.prototype.onAccept = function() {
      var notif;
      Lungo.Notification.hide();
      notif = function() {
        Lungo.Notification.show();
        return setTimeout(function() {
          return Lungo.Notification.hide();
        }, 3000);
      };
      setTimeout(notif, 300);
      return this.notified = true;
    };

    MapController.prototype.onCancel = function() {
      return this.notified = true;
    };

    return MapController;

  })(Monocle.Controller);

  App.SignupController = (function(_super) {
    __extends(SignupController, _super);

    function SignupController() {
      _ref4 = SignupController.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SignupController.prototype.elements = {
      "#signup-name": "name",
      "#signup-password": "pass",
      "#signup-realname": "realname",
      "#signup-gender": "gender"
    };

    SignupController.prototype.events = {
      "tap .btn-signup": "onSignup"
    };

    SignupController.prototype.checkData = function() {
      var data, e, str, _i, _len, _ref5;
      data = {};
      _ref5 = ['name', 'pass', 'realname', 'gender'];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        e = _ref5[_i];
        str = this[e].val();
        if (!str) {
          this.showError();
          break;
        } else {
          data[e] = str;
        }
      }
      return data;
    };

    SignupController.prototype.onSignup = function(event) {
      var data, res;
      event.preventDefault();
      data = this.checkData();
      res = App.StorageManager.signup(data);
      if (!res) {
        return this.showError();
      } else {
        return this.showSuccess();
      }
    };

    SignupController.prototype.showSuccess = function() {
      return Lungo.Notification.success("Success", "User signed up successfully!", "check", 2, function() {
        return Lungo.Router.section('#activity');
      });
    };

    SignupController.prototype.showError = function() {
      return Lungo.Notification.error("Error", "Signup failed :(", "cancel", 2);
    };

    return SignupController;

  })(Monocle.Controller);

  App.Site = (function(_super) {
    __extends(Site, _super);

    function Site() {
      _ref5 = Site.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Site.fields("name", "description", "city", "address", "picture", "style", "users", "events", "owner");

    Site.prototype.initialize = function() {};

    Site.prototype.validate = function() {
      if (!this.name) {
        return "name is required";
      }
    };

    Site.prototype.love = function(user) {
      console.log("love");
      return this;
    };

    return Site;

  })(Monocle.Model);

  App.SiteItemView = (function(_super) {
    __extends(SiteItemView, _super);

    function SiteItemView() {
      _ref6 = SiteItemView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    SiteItemView.prototype.container = "#sitesfav ul";

    SiteItemView.prototype.template = "<li class=\"arrow selectable thumb\">\n    <img src=\"{{picture}}\" class=\"icon\">\n\n    <a href=\"#\" class=\"accept button right\">\n        <span class=\"icon heart\"></span>\n        <abbr>Loving</abbr>\n    </a>\n\n    <a href=\"#site\" data-router=\"section\">\n        <strong>{{name}}</strong>\n        <small>{{description}}</small>\n    </a>\n</li>";

    SiteItemView.prototype.events = {
      "tap .button": "onLove"
    };

    SiteItemView.prototype.onLove = function(event) {
      console.error(this.model);
      return this.model.love();
    };

    return SiteItemView;

  })(Monocle.View);

  App.SitesController = (function(_super) {
    __extends(SitesController, _super);

    SitesController.prototype.elements = {
      "#sitesfav ul": "fav",
      "#sitesrec ul": "rec",
      "#sitesall ul": "all"
    };

    SitesController.prototype.events = {
      "click a[data-action=search]": "onSearch"
    };

    function SitesController() {
      this.bindSiteError = __bind(this.bindSiteError, this);
      this.bindSiteDelete = __bind(this.bindSiteDelete, this);
      this.bindSiteCreate = __bind(this.bindSiteCreate, this);
      SitesController.__super__.constructor.apply(this, arguments);
      App.Site.bind("create", this.bindSiteCreate);
      App.Site.bind("delete", this.bindSiteDelete);
      App.Site.bind("error", this.bindSiteError);
    }

    SitesController.prototype.onSearch = function(event) {
      return alert("Searching");
    };

    SitesController.prototype.bindSiteCreate = function(site) {
      var view;
      console.log("You've created " + site.name + "!");
      view = new App.SiteItemView({
        model: site
      });
      return view.append(site);
    };

    SitesController.prototype.bindSiteDelete = function(site) {
      return alert("You've deleted " + site.name + "!");
    };

    SitesController.prototype.bindSiteError = function(site) {
      return alert("Site Error spotted, " + site + "!");
    };

    SitesController.prototype.viewProfile = function(params) {
      return console.log("View the profile of the site: " + params.id);
    };

    return SitesController;

  })(Monocle.Controller);

  App.User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref7 = User.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    User.fields("displayName", "picture", "gender", "city", "public", "likes", "birthday", "sites", "friends", "events", "bio", "role", "timeline");

    User.prototype.initialize = function() {};

    User.prototype.validate = function() {
      if (!this.name) {
        return "name is required";
      }
    };

    return User;

  })(Monocle.Model);

  App.UserController = (function(_super) {
    __extends(UserController, _super);

    function UserController() {
      _ref8 = UserController.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    return UserController;

  })(Monocle.Controller);

  Lungo.ready(function() {
    var n, _i, _results;
    console.log("Ready!!");
    "App.Auth.signup\n    username: \"asd\"\n    password: \"asd\"";
    new App.LoginController("section#login");
    new App.SignupController("section#signup");
    new App.ActivityController("section#activity");
    new App.SitesController("section#sites");
    new App.MapController("section#map");
    new App.HelpController("section#help");
    _results = [];
    for (n = _i = 1; _i <= 4; n = ++_i) {
      _results.push(App.Site.create({
        name: "Kapital " + n,
        description: "Lo mejor de Madrid",
        picture: "assets/images/logos/kapital.png"
      }));
    }
    return _results;
  });

  App.Exceptions = {
    AuthWrongFields: "Auth Fields Error",
    TooMuchUsersStorage: "Too much users on storage"
  };

  App.Utils = {};

}).call(this);
